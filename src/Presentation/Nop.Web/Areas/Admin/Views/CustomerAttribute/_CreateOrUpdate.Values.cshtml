@model CustomerAttributeModel

@if (Model.Id > 0)
{
    <div class="card-body">
        @await Html.PartialAsync("Table", new DataTablesModel
        {
            Name = "customerattributevalues-grid",
            UrlRead = new DataUrl("ValueList", "CustomerAttribute", new RouteValueDictionary { [nameof(Model.CustomerAttributeValueSearchModel.CustomerAttributeId)] = Model.CustomerAttributeValueSearchModel.CustomerAttributeId }),
            UrlDelete = new DataUrl("ValueDelete", "CustomerAttribute", null),
            Length = Model.CustomerAttributeValueSearchModel.PageSize,
            LengthMenu = Model.CustomerAttributeValueSearchModel.AvailablePageSizes,
            ColumnCollection = new List<ColumnProperty>
            {
                new ColumnProperty(nameof(CustomerAttributeValueModel.Name))
                {
                    Title = (await T("Admin.Customers.CustomerAttributes.Values.Fields.Name")).Value
                },
                new ColumnProperty(nameof(CustomerAttributeValueModel.IsPreSelected))
                {
                    Title = (await T("Admin.Customers.CustomerAttributes.Values.Fields.IsPreSelected")).Value,
                    Width = "100",
                    ClassName = NopColumnClassDefaults.CenterAll,
                    Render = new RenderBoolean()
                },
                new ColumnProperty(nameof(CustomerAttributeValueModel.DisplayOrder))
                {
                    Title = (await T("Admin.Customers.CustomerAttributes.Values.Fields.DisplayOrder")).Value,
                    Width = "100",
                    ClassName =  NopColumnClassDefaults.CenterAll
                },
                new ColumnProperty(nameof(CustomerAttributeValueModel.Id))
                {
                    Title = (await T("Admin.Common.Edit")).Value,
                    Width = "100",
                    ClassName =  NopColumnClassDefaults.Button,
                    Render = new RenderCustom("renderColumnEdit")
                },
                new ColumnProperty(nameof(CustomerAttributeValueModel.Id))
                {
                    Title = (await T("Admin.Common.Delete")).Value,
                    Width = "100",
                    Render = new RenderButtonRemove((await T("Admin.Common.Delete")).Value),
                    ClassName =  NopColumnClassDefaults.Button
                }
            }
        })
    
        <script>
            function renderColumnEdit(data, type, row, meta) {
                return '<button onclick=\"javascript:OpenWindow(\'@Url.Content("~/Admin/CustomerAttribute/ValueEditPopup/")' + data + '?btnId=btnRefresh&formId=customerattribute-form\', 800, 400, true); return false;\" class="btn btn-default"><i class="fas fa-pencil-alt"></i>@await T("Admin.Common.Edit")</button>';
            }
        </script>    
    </div>
    <div class="card-footer">
        <button type="submit" id="btnAddNewValue" onclick="javascript:OpenWindow('@(Url.Action("ValueCreatePopup", "CustomerAttribute", new { customerAttributeId = Model.Id, btnId = "btnRefresh", formId = "customerattribute-form" }))', 800, 400, true); return false;" class="btn btn-primary">
            @await T("Admin.Customers.CustomerAttributes.Values.AddNew")
        </button>
        <button type="submit" id="btnRefresh" style="display: none"></button>
        <script>
            $(document).ready(function () {
                $('#btnRefresh').click(function () {
                    //refresh grid
                    updateTable('#customerattributevalues-grid');

                    //return false to don't reload a page
                    return false;
                });
            });
        </script>
    </div>
}
else
{
    <div class="card-body">
        @await T("Admin.Customers.CustomerAttributes.Values.SaveBeforeEdit")
    </div>
}
