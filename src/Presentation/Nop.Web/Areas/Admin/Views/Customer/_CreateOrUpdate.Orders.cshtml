@using Nop.Services.Stores
@model CustomerModel
@inject IStoreService storeService
<div class="card-body">
    @await Html.PartialAsync("Table", new DataTablesModel
    {
        Name = "order-grid",
        UrlRead = new DataUrl("OrderList", "Customer", new RouteValueDictionary { [nameof(Model.CustomerOrderSearchModel.CustomerId)] = Model.CustomerOrderSearchModel.CustomerId }),
        Length = Model.CustomerOrderSearchModel.PageSize,
        LengthMenu = Model.CustomerOrderSearchModel.AvailablePageSizes,
        ColumnCollection = new List<ColumnProperty>
        {
            new ColumnProperty(nameof(CustomerOrderModel.CustomOrderNumber))
            {
                Title = (await T("Admin.Customers.Customers.Orders.CustomOrderNumber")).Value,
                Width = "200"
            },
            new ColumnProperty(nameof(CustomerOrderModel.OrderTotal))
            {
                Title = (await T("Admin.Customers.Customers.Orders.OrderTotal")).Value,
                Width = "200"
            },
            new ColumnProperty(nameof(CustomerOrderModel.OrderStatus))
            {
                Title = (await T("Admin.Customers.Customers.Orders.OrderStatus")).Value,
                Width = "200",
                Render = new RenderCustom("renderColumnOrderStatus")
            },
            new ColumnProperty(nameof(CustomerOrderModel.PaymentStatus))
            {
                Title = (await T("Admin.Orders.Fields.PaymentStatus")).Value,
                Width = "200"
            },
            new ColumnProperty(nameof(CustomerOrderModel.ShippingStatus))
            {
                Title = (await T("Admin.Orders.Fields.ShippingStatus")).Value,
                Width = "200"
            },
            new ColumnProperty(nameof(CustomerOrderModel.StoreName))
            {
                Title = (await T("Admin.Orders.Fields.Store")).Value,
                Width = "200",
                Visible = (await storeService.GetAllStoresAsync()).Count > 1
            },
            new ColumnProperty(nameof(CustomerOrderModel.CreatedOn))
            {
                Title = (await T("Admin.System.Log.Fields.CreatedOn")).Value,
                Width = "200",
                Render = new RenderDate()
            },
            new ColumnProperty(nameof(CustomerOrderModel.Id))
            {
                Title = (await T("Admin.Common.View")).Value,
                Width = "100",
                ClassName = NopColumnClassDefaults.Button,
                Render = new RenderButtonView(new DataUrl("~/Admin/Order/Edit/"))
            }
        }
    })
    <script>
        function renderColumnOrderStatus(data, type, row, meta) {
            var color; 
            switch (row.OrderStatusId) {
            case 10: color = 'yellow'; break;
            case 20: color = 'blue'; break;
            case 30: color = 'green'; break;
            case 40: color = 'red'; break;
            }
            return '<span class="grid-report-item ' + color + '">' + data + '</span >';
        }
    </script>
</div>
