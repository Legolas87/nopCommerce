@model ProductAttributeMappingModel

@if (Model.Id > 0)
{
    <div class="card-body">
        @await Html.PartialAsync("Table", new DataTablesModel
   {
       Name = "productattributevalues-grid",
       UrlRead = new DataUrl("ProductAttributeValueList", "Product", new RouteValueDictionary { [nameof(Model.ProductAttributeValueSearchModel.ProductAttributeMappingId)] = Model.ProductAttributeValueSearchModel.ProductAttributeMappingId }),
       UrlDelete = new DataUrl("ProductAttributeValueDelete", "Product", null),
       Length = Model.ProductAttributeValueSearchModel.PageSize,
       LengthMenu = Model.ProductAttributeValueSearchModel.AvailablePageSizes,
       ColumnCollection = new List<ColumnProperty>
            {
                new ColumnProperty(nameof(ProductAttributeValueModel.AttributeValueTypeName))
                {
                    Title = (await T("Admin.Catalog.Products.ProductAttributes.Attributes.Values.Fields.AttributeValueType")).Value,
                    Width = "200"
                },
                new ColumnProperty(nameof(ProductAttributeValueModel.Name))
                {
                    Title = (await T("Admin.Catalog.Products.ProductAttributes.Attributes.Values.Fields.Name")).Value,
                    Width = "200"
                },
                new ColumnProperty(nameof(ProductAttributeValueModel.AssociatedProductName))
                {
                    Title = (await T("Admin.Catalog.Products.ProductAttributes.Attributes.Values.Fields.AssociatedProduct")).Value,
                    Width = "200"
                },
                new ColumnProperty(nameof(ProductAttributeValueModel.PriceAdjustmentStr))
                {
                    Title = (await T("Admin.Catalog.Products.ProductAttributes.Attributes.Values.Fields.PriceAdjustment")).Value,
                    Width = "200"
                },
                new ColumnProperty(nameof(ProductAttributeValueModel.WeightAdjustmentStr))
                {
                    Title = (await T("Admin.Catalog.Products.ProductAttributes.Attributes.Values.Fields.WeightAdjustment")).Value,
                    Width = "200"
                },
                new ColumnProperty(nameof(ProductAttributeValueModel.IsPreSelected))
                {
                    Title = (await T("Admin.Catalog.Products.ProductAttributes.Attributes.Values.Fields.IsPreSelected")).Value,
                    Width = "150",
                    ClassName = NopColumnClassDefaults.CenterAll,
                    Render = new RenderBoolean()
                },
                new ColumnProperty(nameof(ProductAttributeValueModel.PictureThumbnailUrl))
                {
                    Title = (await T("Admin.Catalog.Products.ProductAttributes.Attributes.Values.Fields.Picture")).Value,
                    Width = "200",
                    ClassName = NopColumnClassDefaults.CenterAll,
                    Render = new RenderPicture()
                },
                new ColumnProperty(nameof(ProductAttributeValueModel.DisplayOrder))
                {
                    Title = (await T("Admin.Catalog.Products.ProductAttributes.Attributes.Values.Fields.DisplayOrder")).Value,
                    Width = "150",
                    ClassName = NopColumnClassDefaults.CenterAll
                },
                new ColumnProperty(nameof(ProductAttributeValueModel.Id))
                {
                    Title = (await T("Admin.Common.Edit")).Value,
                    Width = "100",
                    ClassName =  NopColumnClassDefaults.Button,
                    Render = new RenderCustom("renderProductAttributeMappingValuesColumnEdit")
                },
                new ColumnProperty(nameof(ProductAttributeValueModel.Id))
                {
                    Title = (await T("Admin.Common.Delete")).Value,
                    Width = "100",
                    Render = new RenderButtonRemove((await T("Admin.Common.Delete")).Value),
                    ClassName =  NopColumnClassDefaults.Button
                }
            }
   })
    
        <script>
            function renderProductAttributeMappingValuesColumnEdit(data, type, row, meta) {
                return '<button onclick=\"javascript:OpenWindow(\'@Url.Content("~/Admin/Product/ProductAttributeValueEditPopup/")' + data + '?btnId=btnRefresh&formId=productattribute-form\', 800, 750, true); return false;\" class="btn btn-default"><i class="fas fa-pencil-alt"></i>@await T("Admin.Common.Edit")</button>';
            }
        </script>
    </div>
    <div class="card-footer">
        <button type="submit" id="btnAddNewValue" onclick="javascript:OpenWindow('@(Url.Action("ProductAttributeValueCreatePopup", "Product", new { productAttributeMappingId = Model.Id, btnId = "btnRefresh", formId = "productattribute-form" }))', 800, 750, true);return false;" class="btn btn-primary">
            @await T("Admin.Catalog.Products.ProductAttributes.Attributes.Values.AddNew")
        </button>
        <button type="submit" id="btnRefresh" style="display: none"></button>
        <script>
            $(document).ready(function () {
                $('#btnRefresh').click(function () {
                    //refresh grid
                    updateTable('#productattributevalues-grid');

                    //return false to don't reload a page
                    return false;
                });
            });
        </script>
    </div>
}
else
{
    <div class="card-body">
        @await T("Admin.Catalog.Products.ProductAttributes.Attributes.Values.SaveBeforeEdit")
    </div>
}