@model ProductModel

@await Component.InvokeAsync(typeof(AdminWidgetViewComponent), new { widgetZone = AdminWidgetZones.ProductDetailsProductAttributesInfoTop, additionalData = Model })
<div class="cards-group">
    <div class="card card-default">
        <div class="card-body">
            @await Html.PartialAsync("Table", new DataTablesModel
            {
                Name = "productattributemappings-grid",
                UrlRead = new DataUrl("ProductAttributeMappingList", "Product", new RouteValueDictionary { [nameof(Model.ProductAttributeMappingSearchModel.ProductId)] = Model.ProductAttributeMappingSearchModel.ProductId }),
                Length = Model.ProductPictureSearchModel.PageSize,
                LengthMenu = Model.ProductPictureSearchModel.AvailablePageSizes,
                ColumnCollection = new List<ColumnProperty>
                {
                    new ColumnProperty(nameof(ProductAttributeMappingModel.ProductAttribute))
                    {
                        Title = (await T("Admin.Catalog.Products.ProductAttributes.Attributes.Fields.Attribute")).Value,
                        Width = "200"
                    },
                    new ColumnProperty(nameof(ProductAttributeMappingModel.TextPrompt))
                    {
                        Title = (await T("Admin.Catalog.Products.ProductAttributes.Attributes.Fields.TextPrompt")).Value,
                        Width = "150"
                    },
                    new ColumnProperty(nameof(ProductAttributeMappingModel.IsRequired))
                    {
                        Title = (await T("Admin.Catalog.Products.ProductAttributes.Attributes.Fields.IsRequired")).Value,
                        Width = "100",
                        ClassName = NopColumnClassDefaults.CenterAll,
                        Render = new RenderBoolean()
                    },
                    new ColumnProperty(nameof(ProductAttributeMappingModel.AttributeControlType))
                    {
                        Title = (await T("Admin.Catalog.Products.ProductAttributes.Attributes.Fields.AttributeControlType")).Value,
                        Width = "250"
                    },
                    new ColumnProperty(nameof(ProductAttributeMappingModel.DisplayOrder))
                    {
                        Title = (await T("Admin.Catalog.Products.ProductAttributes.Attributes.Fields.DisplayOrder")).Value,
                        Width = "150",
                        ClassName =  NopColumnClassDefaults.CenterAll
                    },
                    new ColumnProperty(nameof(ProductAttributeMappingModel.ValidationRulesString))
                    {
                        Title = (await T("Admin.Catalog.Products.ProductAttributes.Attributes.ValidationRules")).Value,
                        Width = "150",
                        ClassName = NopColumnClassDefaults.CenterAll,
                        Encode = false
                    },
                    new ColumnProperty(nameof(ProductAttributeMappingModel.ConditionString))
                    {
                        Title = (await T("Admin.Catalog.Products.ProductAttributes.Attributes.Condition")).Value,
                        Width = "150",
                        ClassName = NopColumnClassDefaults.CenterAll,
                        Encode = false
                    },
                    new ColumnProperty(nameof(ProductAttributeMappingModel.Id))
                    {
                        Title = (await T("Admin.Common.Edit")).Value,
                        Width = "100",
                        ClassName =  NopColumnClassDefaults.Button,
                        Render = new RenderButtonEdit(new DataUrl("~/Admin/Product/ProductAttributeMappingEdit/"))
                    }
                }
            })
        </div>

        <div class="card-footer">
            <a asp-action="ProductAttributeMappingCreate" asp-route-productId="@Model.Id" class="btn btn-primary">
                <i class="fas fa-plus-square"></i>
                @await T("Admin.Catalog.Products.ProductAttributes.Attributes.AddNew")
            </a>
        </div>
    </div>
</div>
@await Component.InvokeAsync(typeof(AdminWidgetViewComponent), new { widgetZone = AdminWidgetZones.ProductDetailsProductAttributesInfoBottom, additionalData = Model })
