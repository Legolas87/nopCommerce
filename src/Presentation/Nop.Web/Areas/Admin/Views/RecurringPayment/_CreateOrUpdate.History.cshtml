@model RecurringPaymentModel

<div class="card-body">
    @if (Model.LastPaymentFailed)
    {
        <div class="form-group row">
            <div class="col-md-12">
                @await T("Admin.RecurringPayments.History.LastPaymentFailed")
            </div>
        </div>
    }
    @if (!string.IsNullOrEmpty(Model.NextPaymentDate))
    {
        <div class="form-group row">
            <div class="col-md-12">
                @await T("Admin.RecurringPayments.History.NextPaymentDate")
                <text>:</text>
                @Model.NextPaymentDate
            </div>
        </div>
    }
    @if (!string.IsNullOrEmpty(Model.NextPaymentDate) || Model.CanCancelRecurringPayment)
    {
        <div class="form-group row">
            <div class="col-md-12">
                @if (!string.IsNullOrEmpty(Model.NextPaymentDate))
                {
                    <button type="submit" name="processnextpayment" class="btn btn-success">
                        @await T("Admin.RecurringPayments.History.ProcessNextPayment")
                    </button>
                }
                @if (Model.CanCancelRecurringPayment)
                {
                    <button type="submit" name="cancelpayment" class="btn btn-secondary">
                        @await T("Admin.RecurringPayments.History.CancelPayment")
                    </button>
                }
            </div>
        </div>
    }

    @await Html.PartialAsync("Table", new DataTablesModel
    {
        Name = "history-grid",
        UrlRead = new DataUrl("HistoryList", "RecurringPayment", new RouteValueDictionary { [nameof(Model.RecurringPaymentHistorySearchModel.RecurringPaymentId)] = Model.RecurringPaymentHistorySearchModel.RecurringPaymentId }),
        Length = Model.RecurringPaymentHistorySearchModel.PageSize,
        LengthMenu = Model.RecurringPaymentHistorySearchModel.AvailablePageSizes,
        ColumnCollection = new List<ColumnProperty>
        {
            new ColumnProperty(nameof(RecurringPaymentHistoryModel.CustomOrderNumber))
            {
                Title = (await T("Admin.RecurringPayments.History.CustomOrderNumber")).Value,
                ClassName =  NopColumnClassDefaults.Button,
                Width = "200",
                Render = new RenderCustom("renderColumnOrderInfo")
            },
            new ColumnProperty(nameof(RecurringPaymentHistoryModel.OrderStatus))
            {
                Title = (await T("Admin.RecurringPayments.History.OrderStatus")).Value,
                Width = "200"
            },
            new ColumnProperty(nameof(RecurringPaymentHistoryModel.PaymentStatus))
            {
                Title = (await T("Admin.RecurringPayments.History.PaymentStatus")).Value,
                Width = "200"
            },
            new ColumnProperty(nameof(RecurringPaymentHistoryModel.ShippingStatus))
            {
                Title = (await T("Admin.RecurringPayments.History.ShippingStatus")).Value,
                Width = "200"
            },
            new ColumnProperty(nameof(RecurringPaymentHistoryModel.CreatedOn))
            {
                Title = (await T("Admin.RecurringPayments.History.CreatedOn")).Value,
                Width = "100",
                Render = new RenderDate()
            }
        }
    })
    <script asp-location="Footer">
        function renderColumnOrderInfo(data, type, row, meta) {
            if (row.OrderId > 0) {
                var textRenderer = $.fn.dataTable.render.text().display;
                return '<a class="btn btn-default" href="@Url.Content("~/Admin/Order/Edit/")' + row.OrderId + '"><i class="far fa-eye"></i>' + textRenderer(row.CustomOrderNumber) + ' - @await T("Admin.Common.View")</a>';
            } else {
                return 'order item is deleted';
            }
        }
    </script>
</div>